
UART_Sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000010  00800060  00800060  000001b2  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002b0  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000169  00000000  00000000  000004d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001e6  00000000  00000000  0000063b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000064  00000000  00000000  00000824  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ce  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000067  00000000  00000000  00000a56  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000abd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 37       	cpi	r26, 0x70	; 112
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  74:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <makeSymbol>:

unsigned char symbol[8];
unsigned char finalSymbol[8];

void makeSymbol(){
	symbol[0]=0x00;
  7c:	10 92 60 00 	sts	0x0060, r1
	symbol[1] =0x00;
  80:	10 92 61 00 	sts	0x0061, r1
	symbol[2]=0b00100100;
  84:	84 e2       	ldi	r24, 0x24	; 36
  86:	80 93 62 00 	sts	0x0062, r24
	symbol[3] =0b00011000;
  8a:	98 e1       	ldi	r25, 0x18	; 24
  8c:	90 93 63 00 	sts	0x0063, r25
	symbol[4] =0b00011000;
  90:	90 93 64 00 	sts	0x0064, r25
	symbol[5]=0b00100100;
  94:	80 93 65 00 	sts	0x0065, r24
	symbol[6]=0x00;
  98:	10 92 66 00 	sts	0x0066, r1
	symbol[7] = 0x00;
  9c:	10 92 67 00 	sts	0x0067, r1
  a0:	08 95       	ret

000000a2 <UART_init>:
}
void UART_init(){
	UCSRA = 0x00 ;
  a2:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x18 ;
  a4:	88 e1       	ldi	r24, 0x18	; 24
  a6:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0x86 ;
  a8:	86 e8       	ldi	r24, 0x86	; 134
  aa:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0x33 ;
  ac:	83 e3       	ldi	r24, 0x33	; 51
  ae:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0x00 ;
  b0:	10 bc       	out	0x20, r1	; 32
  b2:	08 95       	ret

000000b4 <UART_send>:
	
}

void UART_send(unsigned char data){
	while((UCSRA & (1<<UDRE))==0);
  b4:	5d 9b       	sbis	0x0b, 5	; 11
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <UART_send>
	UDR = data ;
  b8:	8c b9       	out	0x0c, r24	; 12
  ba:	08 95       	ret

000000bc <UART_receive>:
}
unsigned char UART_receive(){
	while(((UCSRA)&(1<<RXC))==0);
  bc:	5f 9b       	sbis	0x0b, 7	; 11
  be:	fe cf       	rjmp	.-4      	; 0xbc <UART_receive>
	return UDR ;
  c0:	8c b1       	in	r24, 0x0c	; 12
}
  c2:	08 95       	ret

000000c4 <main>:

int main(void)
{
	DDRB = 0xFF ;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF ;
  c8:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xFF ;
  ca:	81 bb       	out	0x11, r24	; 17
	makeSymbol();
  cc:	0e 94 3e 00 	call	0x7c	; 0x7c <makeSymbol>
	UART_init() ;
  d0:	0e 94 51 00 	call	0xa2	; 0xa2 <UART_init>
	int i = 0;
  d4:	c0 e0       	ldi	r28, 0x00	; 0
  d6:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char data=0xFF;
	while(1){
		data = symbol[i];
		
		UART_send(data);
		PORTA = 0xFF;
  d8:	1f ef       	ldi	r17, 0xFF	; 255
	makeSymbol();
	UART_init() ;
	int i = 0;
	unsigned char data=0xFF;
	while(1){
		data = symbol[i];
  da:	fe 01       	movw	r30, r28
  dc:	e0 5a       	subi	r30, 0xA0	; 160
  de:	ff 4f       	sbci	r31, 0xFF	; 255
		
		UART_send(data);
  e0:	80 81       	ld	r24, Z
  e2:	0e 94 5a 00 	call	0xb4	; 0xb4 <UART_send>
		PORTA = 0xFF;
  e6:	1b bb       	out	0x1b, r17	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	87 ea       	ldi	r24, 0xA7	; 167
  ea:	91 e6       	ldi	r25, 0x61	; 97
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x28>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x2e>
  f2:	00 00       	nop
		_delay_ms(100) ;
		PORTA = 0x00 ;
  f4:	1b ba       	out	0x1b, r1	; 27
  f6:	87 ea       	ldi	r24, 0xA7	; 167
  f8:	91 e6       	ldi	r25, 0x61	; 97
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x36>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x3c>
 100:	00 00       	nop
		_delay_ms(100) ;
		data = UART_receive();
 102:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_receive>
		
		PORTB = 0xFF ;
 106:	18 bb       	out	0x18, r17	; 24
 108:	87 ea       	ldi	r24, 0xA7	; 167
 10a:	91 e6       	ldi	r25, 0x61	; 97
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x48>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x4e>
 112:	00 00       	nop
		_delay_ms(100) ;
		PORTB = 0x00 ;
 114:	18 ba       	out	0x18, r1	; 24
 116:	87 ea       	ldi	r24, 0xA7	; 167
 118:	91 e6       	ldi	r25, 0x61	; 97
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x56>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x5c>
 120:	00 00       	nop
		_delay_ms(100) ;
		
		i = (i+1)%8;
 122:	ce 01       	movw	r24, r28
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	87 70       	andi	r24, 0x07	; 7
 128:	90 78       	andi	r25, 0x80	; 128
 12a:	99 23       	and	r25, r25
 12c:	24 f4       	brge	.+8      	; 0x136 <main+0x72>
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	88 6f       	ori	r24, 0xF8	; 248
 132:	9f 6f       	ori	r25, 0xFF	; 255
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	ec 01       	movw	r28, r24
 138:	d0 cf       	rjmp	.-96     	; 0xda <main+0x16>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
