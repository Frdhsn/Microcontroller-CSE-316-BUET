
LCD 8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000728  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d6  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c1  00000000  00000000  00000f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032a  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019b  00000000  00000000  0000155a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  74:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <UART_Init>:
#define UART_TxCHAR(ch) { while(!(UCSRA & 1<<UDRE)); UDR=ch; }


void UART_Init()
{
	UCSRB |= (1<<RXEN) ;// | (1<<TXEN);
  7c:	54 9a       	sbi	0x0a, 4	; 10
	UCSRC |= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1)  | (1<<USBS);  // 8 BIT CHARACTER
  7e:	80 b5       	in	r24, 0x20	; 32
  80:	8e 68       	ori	r24, 0x8E	; 142
  82:	80 bd       	out	0x20, r24	; 32
	UBRRL = (unsigned char) BAUD_PRESCALE;
  84:	85 e0       	ldi	r24, 0x05	; 5
  86:	89 b9       	out	0x09, r24	; 9
	UBRRH = (unsigned char)(BAUD_PRESCALE >> 8) ;
  88:	10 bc       	out	0x20, r1	; 32
  8a:	08 95       	ret

0000008c <main>:
//	_delay_ms(400);
//	GIFR |= (1<<INT1);
//}

int main(void)
{
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
  94:	c0 59       	subi	r28, 0x90	; 144
  96:	d1 40       	sbci	r29, 0x01	; 1
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	f8 94       	cli
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	cd bf       	out	0x3d, r28	; 61
	UART_Init();
  a2:	0e 94 3e 00 	call	0x7c	; 0x7c <UART_Init>

	DDRA = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x8F;
  aa:	8f e8       	ldi	r24, 0x8F	; 143
  ac:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f e9       	ldi	r18, 0x9F	; 159
  b0:	36 e8       	ldi	r19, 0x86	; 134
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	30 40       	sbci	r19, 0x00	; 0
  b8:	40 40       	sbci	r20, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x28>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x32>
  be:	00 00       	nop
	_delay_ms(500);
	PORTA = 0x0F;
  c0:	8f e0       	ldi	r24, 0x0F	; 15
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	8f eb       	ldi	r24, 0xBF	; 191
  c6:	97 e2       	ldi	r25, 0x27	; 39
  c8:	29 e0       	ldi	r18, 0x09	; 9
  ca:	81 50       	subi	r24, 0x01	; 1
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	20 40       	sbci	r18, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x3e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x48>
  d4:	00 00       	nop
  d6:	de 01       	movw	r26, r28
  d8:	11 96       	adiw	r26, 0x01	; 1
  da:	ce 01       	movw	r24, r28
  dc:	89 56       	subi	r24, 0x69	; 105
  de:	9f 4f       	sbci	r25, 0xFF	; 255
  e0:	fd 01       	movw	r30, r26
	_delay_ms(3000);
	unsigned char id=0, ch, i;
	unsigned char arr[400];
	while(1)
	{
		UART_RxCHAR();
  e2:	5f 9b       	sbis	0x0b, 7	; 11
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <main+0x56>
		ch = UDR;
  e6:	2c b1       	in	r18, 0x0c	; 12

		//PORTA = ch;
		arr[id++]=ch;
  e8:	21 93       	st	Z+, r18
		if(id==150) break;
  ea:	e8 17       	cp	r30, r24
  ec:	f9 07       	cpc	r31, r25
  ee:	c9 f7       	brne	.-14     	; 0xe2 <main+0x56>
		//_delay_ms(500);
		//break;
	}
	PORTA=id;
  f0:	26 e9       	ldi	r18, 0x96	; 150
  f2:	2b bb       	out	0x1b, r18	; 27
  f4:	3f ef       	ldi	r19, 0xFF	; 255
  f6:	44 e3       	ldi	r20, 0x34	; 52
  f8:	2c e0       	ldi	r18, 0x0C	; 12
  fa:	31 50       	subi	r19, 0x01	; 1
  fc:	40 40       	sbci	r20, 0x00	; 0
  fe:	20 40       	sbci	r18, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x6e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x78>
 104:	00 00       	nop
	_delay_ms(4000);
	for(i=0;i<id;i++)
	{
		PORTA=arr[i];
 106:	2d 91       	ld	r18, X+
 108:	2b bb       	out	0x1b, r18	; 27
 10a:	3f eb       	ldi	r19, 0xBF	; 191
 10c:	44 ed       	ldi	r20, 0xD4	; 212
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	31 50       	subi	r19, 0x01	; 1
 112:	40 40       	sbci	r20, 0x00	; 0
 114:	20 40       	sbci	r18, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x84>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x8e>
 11a:	00 00       	nop
		//_delay_ms(500);
		//break;
	}
	PORTA=id;
	_delay_ms(4000);
	for(i=0;i<id;i++)
 11c:	a8 17       	cp	r26, r24
 11e:	b9 07       	cpc	r27, r25
 120:	91 f7       	brne	.-28     	; 0x106 <main+0x7a>
		_delay_ms(600);
	}

	return 0;

}
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	c0 57       	subi	r28, 0x70	; 112
 128:	de 4f       	sbci	r29, 0xFE	; 254
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
