
UART_Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000010  00800060  00800060  00000204  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000029d  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a7  00000000  00000000  00000529  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000020b  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a4  00000000  00000000  000008dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ef  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001db  00000000  00000000  00000b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000d4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 37       	cpi	r26, 0x70	; 112
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 97 00 	call	0x12e	; 0x12e <main>
  74:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <UART_init>:

#define USART_BAUDRATE 9600
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

void UART_init(){
	UCSRA = 0x00 ;
  7c:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x18 ;
  7e:	88 e1       	ldi	r24, 0x18	; 24
  80:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0x86 ;
  82:	86 e8       	ldi	r24, 0x86	; 134
  84:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0x33 ;
  86:	83 e3       	ldi	r24, 0x33	; 51
  88:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0x00 ;
  8a:	10 bc       	out	0x20, r1	; 32
  8c:	08 95       	ret

0000008e <UART_send>:
	symbol[6]=0x00;
	symbol[7] = 0x00;
}

void UART_send(unsigned char data){
	while((UCSRA & (1<<UDRE))==0x00);
  8e:	5d 9b       	sbis	0x0b, 5	; 11
  90:	fe cf       	rjmp	.-4      	; 0x8e <UART_send>
	UDR = data ;
  92:	8c b9       	out	0x0c, r24	; 12
  94:	08 95       	ret

00000096 <UART_receive>:


unsigned char UART_receive(){
	//ROW = ON_FULL_ROW;
	//GREEN_COLM = ON_FULL_COLM;
	while(((UCSRA)&(1<<RXC))==0);
  96:	5f 9b       	sbis	0x0b, 7	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <UART_receive>
	//ROW = ON_FULL_ROW;
	//GREEN_COLM = OFF_FULL_COLM;
	if(UCSRA & ((1<<PE)|(1<<FE)|(1<<DOR))){
  9a:	8b b1       	in	r24, 0x0b	; 11
  9c:	8c 71       	andi	r24, 0x1C	; 28
  9e:	11 f4       	brne	.+4      	; 0xa4 <UART_receive+0xe>
		return 0x0F;
	} 
	return UDR ;
  a0:	8c b1       	in	r24, 0x0c	; 12
  a2:	08 95       	ret
	//GREEN_COLM = ON_FULL_COLM;
	while(((UCSRA)&(1<<RXC))==0);
	//ROW = ON_FULL_ROW;
	//GREEN_COLM = OFF_FULL_COLM;
	if(UCSRA & ((1<<PE)|(1<<FE)|(1<<DOR))){
		return 0x0F;
  a4:	8f e0       	ldi	r24, 0x0F	; 15
	} 
	return UDR ;
}
  a6:	08 95       	ret

000000a8 <makeSymbol>:
		////RED_COLM = ON_FULL_COLM;
	//}
//}


void makeSymbol(){
  a8:	e0 e6       	ldi	r30, 0x60	; 96
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	a8 e6       	ldi	r26, 0x68	; 104
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	88 e6       	ldi	r24, 0x68	; 104
  b2:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;i<N;i++) symbol[i]=buffer[i];
  b4:	21 91       	ld	r18, Z+
  b6:	2d 93       	st	X+, r18
  b8:	e8 17       	cp	r30, r24
  ba:	f9 07       	cpc	r31, r25
  bc:	d9 f7       	brne	.-10     	; 0xb4 <makeSymbol+0xc>
}
  be:	08 95       	ret

000000c0 <draw>:
void draw(){
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	6c eb       	ldi	r22, 0xBC	; 188
  c8:	72 e0       	ldi	r23, 0x02	; 2
  ca:	a8 e6       	ldi	r26, 0x68	; 104
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	10 e0       	ldi	r17, 0x00	; 0
  d0:	d0 e0       	ldi	r29, 0x00	; 0
			if(i>3){
				GREEN_COLM = ~(symbol[i]);
				RED_COLM = OFF_FULL_COLM;
			}
			else if(i<=3){
				GREEN_COLM = OFF_FULL_COLM;
  d2:	cf ef       	ldi	r28, 0xFF	; 255
				RED_COLM =  ~(symbol[i]);
			}
			

			ROW = 1<<i;
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	22 c0       	rjmp	.+68     	; 0x11e <draw+0x5e>
	
	for(k=0;k<700;k++){
		
		for(i=0;i<N;i++)
		{
			ROW = 0;
  da:	18 ba       	out	0x18, r1	; 24
			if(i>3){
  dc:	84 30       	cpi	r24, 0x04	; 4
  de:	91 05       	cpc	r25, r1
  e0:	2c f0       	brlt	.+10     	; 0xec <draw+0x2c>
				GREEN_COLM = ~(symbol[i]);
  e2:	20 81       	ld	r18, Z
  e4:	20 95       	com	r18
  e6:	25 bb       	out	0x15, r18	; 21
				RED_COLM = OFF_FULL_COLM;
  e8:	cb bb       	out	0x1b, r28	; 27
  ea:	04 c0       	rjmp	.+8      	; 0xf4 <draw+0x34>
			}
			else if(i<=3){
				GREEN_COLM = OFF_FULL_COLM;
  ec:	c5 bb       	out	0x15, r28	; 21
				RED_COLM =  ~(symbol[i]);
  ee:	20 81       	ld	r18, Z
  f0:	20 95       	com	r18
  f2:	2b bb       	out	0x1b, r18	; 27
			}
			

			ROW = 1<<i;
  f4:	9a 01       	movw	r18, r20
  f6:	08 2e       	mov	r0, r24
  f8:	02 c0       	rjmp	.+4      	; 0xfe <draw+0x3e>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <draw+0x3a>
 102:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	24 e6       	ldi	r18, 0x64	; 100
 106:	2a 95       	dec	r18
 108:	f1 f7       	brne	.-4      	; 0x106 <draw+0x46>
	int k;
	
	
	for(k=0;k<700;k++){
		
		for(i=0;i<N;i++)
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	31 96       	adiw	r30, 0x01	; 1
 10e:	88 30       	cpi	r24, 0x08	; 8
 110:	91 05       	cpc	r25, r1
 112:	19 f7       	brne	.-58     	; 0xda <draw+0x1a>
 114:	61 50       	subi	r22, 0x01	; 1
 116:	71 09       	sbc	r23, r1
void draw(){
	int i;
	int k;
	
	
	for(k=0;k<700;k++){
 118:	61 15       	cp	r22, r1
 11a:	71 05       	cpc	r23, r1
 11c:	21 f0       	breq	.+8      	; 0x126 <draw+0x66>
 11e:	fd 01       	movw	r30, r26


void makeSymbol(){
	for(int i=0;i<N;i++) symbol[i]=buffer[i];
}
void draw(){
 120:	81 2f       	mov	r24, r17
 122:	9d 2f       	mov	r25, r29
 124:	da cf       	rjmp	.-76     	; 0xda <draw+0x1a>
			//
		}
	}
	
	
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	08 95       	ret

0000012e <main>:



int main(void)
{
	MCUCSR |= (1<<JTD);
 12e:	84 b7       	in	r24, 0x34	; 52
 130:	80 68       	ori	r24, 0x80	; 128
 132:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= (1<<JTD);
 134:	84 b7       	in	r24, 0x34	; 52
 136:	80 68       	ori	r24, 0x80	; 128
 138:	84 bf       	out	0x34, r24	; 52
	DDRA  = 0xFF; // red
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	8a bb       	out	0x1a, r24	; 26
	DDRB  = 0xFF; // row
 13e:	87 bb       	out	0x17, r24	; 23
	DDRC  = 0xFF; // green
 140:	84 bb       	out	0x14, r24	; 20
	DDRD  = 0xFF;
 142:	81 bb       	out	0x11, r24	; 17
	
	UART_init() ;
 144:	0e 94 3e 00 	call	0x7c	; 0x7c <UART_init>
	
	//for(int i=0;i<N;i++) buffer[i]=~i;

	int count = 0;
	while(1){		
		data = UART_receive();
 148:	0e 94 4b 00 	call	0x96	; 0x96 <UART_receive>
		buffer[count]=data;
 14c:	80 93 60 00 	sts	0x0060, r24
		count++;
 150:	c1 e0       	ldi	r28, 0x01	; 1
 152:	d0 e0       	ldi	r29, 0x00	; 0

		if(count>7){
			count = 0;
			PORTD = 0x40;
 154:	68 94       	set
 156:	ff 24       	eor	r15, r15
 158:	f6 f8       	bld	r15, 6
		data = UART_receive();
		buffer[count]=data;
		count++;

		if(count>7){
			count = 0;
 15a:	00 e0       	ldi	r16, 0x00	; 0
 15c:	10 e0       	ldi	r17, 0x00	; 0
 15e:	08 c0       	rjmp	.+16     	; 0x170 <main+0x42>
			PORTD = 0x40;
 160:	f2 ba       	out	0x12, r15	; 18
			makeSymbol();
 162:	0e 94 54 00 	call	0xa8	; 0xa8 <makeSymbol>
			//makeSymbolX();
			draw();
 166:	0e 94 60 00 	call	0xc0	; 0xc0 <draw>
			//_delay_ms(100);
			PORTD = 0x00 ;
 16a:	12 ba       	out	0x12, r1	; 18
		data = UART_receive();
		buffer[count]=data;
		count++;

		if(count>7){
			count = 0;
 16c:	c0 2f       	mov	r28, r16
 16e:	d1 2f       	mov	r29, r17
			//makeSymbolX();
			draw();
			//_delay_ms(100);
			PORTD = 0x00 ;
		}
		UART_send('a');	
 170:	81 e6       	ldi	r24, 0x61	; 97
 172:	0e 94 47 00 	call	0x8e	; 0x8e <UART_send>
	
	//for(int i=0;i<N;i++) buffer[i]=~i;

	int count = 0;
	while(1){		
		data = UART_receive();
 176:	0e 94 4b 00 	call	0x96	; 0x96 <UART_receive>
		buffer[count]=data;
 17a:	fe 01       	movw	r30, r28
 17c:	e0 5a       	subi	r30, 0xA0	; 160
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	80 83       	st	Z, r24
		count++;
 182:	21 96       	adiw	r28, 0x01	; 1

		if(count>7){
 184:	c8 30       	cpi	r28, 0x08	; 8
 186:	d1 05       	cpc	r29, r1
 188:	9c f3       	brlt	.-26     	; 0x170 <main+0x42>
 18a:	ea cf       	rjmp	.-44     	; 0x160 <main+0x32>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
